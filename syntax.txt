/* Example: variables, strings */

var a 1 end
var a 2 end
"Result of a + b =" .s // Strings will be malloc'd and the ptr will be on the stack. use `.s` to print.
$a $b + . // `.` to print item on top of stack.
endl! // use `!` to call functions.

/* Functions */

~endl { "\n" .s } // The `~` is used to signify a function defn.

/* Includes */

include example, std // This expands to include "example.cb" and include "std.cb"

// Allocating memory

var ptr 4 % end // allocates 4 bytes on the heap, binds it to ident `ptr`

/* if and while */

while <cond> {
    <body>
}

... if <body> elseif <body> else <body> endif

// ex:

0 while dup 30 < {
    dup . 1 +
}

x y = if "True\n" .s else "False\n" .s endif

/* chars */

'a' .c // prints 'a'

/* dereferencing pointers */

var 4 % num-ptr // some number stored here

// print the number
$num-ptr 4 @ . // deref: [ptr] [numbytes] - [item]

$num-ptr 4 1424 # // store: [ptr] [numbytes] [item]

/* Casting */

0x0 ->Ptr // cast to pointer
0xFFFFFF ->Int // cast to Int

/* Returning features */

// times loop

do $n times {
    ....
}

/*  */

~func {
    pop a b :
        ...
    end // pops and binds top two items off the stack
}

~func {
    use a b :
        ...
    end // binds but does pop top two items off the stack.
}